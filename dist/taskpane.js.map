{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    document.getElementById(\"run\").onclick = run;\r\n  }\r\n});\r\n\r\nexport async function run() {\r\n  // insertOrReplaceDataByHeader([]);\r\n  // return\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      let ws = context.workbook.worksheets.getItem(\"DrugDetails\");\r\n      let packageDetails = context.workbook.worksheets.getItem(\"packageDistribution\");\r\n      let packageDetailsRange = packageDetails.getRange(\"A2:D7\");\r\n      let usedRange = ws.getUsedRange().getLastRow();\r\n      let wsAutoReplenishHistroy = context.workbook.worksheets.getItem(\"AutoReplenishHistory\");\r\n      let drugsExpirationPredictions = context.workbook.worksheets.getItem(\r\n        \"Drug Replenish Dates(New Kits)\"\r\n      );\r\n      let wsAutoReplenishMedGroups = context.workbook.worksheets.getItem(\r\n        \"auto_replenish_med_groups\"\r\n      );\r\n      let wsRevenuePredictions = context.workbook.worksheets.getItem(\"Revenue Prediction\");\r\n      // let wsAutoReplenishMedGroupsAndPredictions = context.workbook.worksheets.getItem(\r\n      //   \"autoReplenish+Predictions\"\r\n      // );\r\n      wsRevenuePredictions.getRangeByIndexes(1, 0, 10000, 50).clear(Excel.ClearApplyTo.contents);\r\n      drugsExpirationPredictions\r\n        .getRangeByIndexes(1, 0, 10000, 50)\r\n        .clear(Excel.ClearApplyTo.contents);\r\n      //Get the Details\r\n      usedRange.load(\"rowIndex\");\r\n      await context.sync();\r\n      let lastRow = usedRange.rowIndex;\r\n      let data = ws.getRange(`B${1}:O${lastRow + 1}`);\r\n      data.load(\"values\");\r\n      packageDetailsRange.load(\"values\");\r\n      await context.sync();\r\n      let packageDetailsData = packageDetailsRange.values;\r\n      let medsObj = {};\r\n      let emkDetails = {};\r\n      //Get the drug details\r\n      console.log(data.values);\r\n      data.values.forEach((row) => {\r\n        medsObj[row[0]] = {\r\n          totalUnitCost: row[3],\r\n          laCarte: row[4],\r\n          includedInPackages: [],\r\n          shelfLife: row[7],\r\n        };\r\n        for (let i = 8; i <= 13; i++) {\r\n          if (row[i].toString().trim() !== \"\") {\r\n            medsObj[row[0]].includedInPackages.push(data.values[0][i]);\r\n          }\r\n        }\r\n      });\r\n\r\n      packageDetailsData.forEach((row) => {\r\n        //Create the emk objecst\r\n        emkDetails[row[0]] = {\r\n          retailPrice: row[1],\r\n          newKitShares: row[2],\r\n          purchasePrice: row[3],\r\n          drugs: [],\r\n        };\r\n      });\r\n      console.log(medsObj,\"Meds Object\")\r\n\r\n      //Get the New Kit Data\r\n      let wsNewKit = context.workbook.worksheets.getItem(\"New Kit Data\");\r\n      let newKitsLastRow = wsNewKit.getUsedRange().getLastRow();\r\n      newKitsLastRow.load(\"rowIndex\");\r\n      await context.sync();\r\n      let newKitsLastRowIndex = newKitsLastRow.rowIndex;\r\n      let dataRange = wsNewKit.getRange(`A2:B${newKitsLastRowIndex + 1}`);\r\n      dataRange.load(\"values\");\r\n      await context.sync();\r\n      let newKitData = dataRange.values;\r\n      let salesHistory = {};\r\n      //Get the Kit Revenue for each Kit and total Revenue\r\n      let calculatedKitData = newKitData.map((row) => {\r\n        salesHistory[formatDate(excelSerialDateToJSDate(row[0]))] = row[1];\r\n        let numberOfKits = row[1];\r\n        let EMK1 =\r\n          Math.floor(emkDetails[\"EMK1\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1\"].retailPrice;\r\n        let EMK5 =\r\n          Math.floor(emkDetails[\"EMK5\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK5\"].retailPrice;\r\n        let EMK10 =\r\n          Math.floor(emkDetails[\"EMK10\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10\"].retailPrice;\r\n        let EMK15 =\r\n          Math.floor(emkDetails[\"EMK15\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK15\"].retailPrice;\r\n        let EMK1Mini =\r\n          Math.floor(emkDetails[\"EMK1-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1-Mini\"].retailPrice;\r\n        let EMK10Mini =\r\n          Math.floor(emkDetails[\"EMK10-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10-Mini\"].retailPrice;\r\n        return [\r\n          row[0],\r\n          row[1],\r\n          EMK1 + EMK5 + EMK10 + EMK15 + EMK1Mini + EMK10Mini,\r\n          \"\",\r\n          EMK1,\r\n          EMK5,\r\n          EMK10,\r\n          EMK15,\r\n          EMK1Mini,\r\n          EMK10Mini,\r\n        ];\r\n      });\r\n      //Add the Kit Revenue to the sheet\r\n\r\n      wsNewKit.getRange(\"A2:J\" + (calculatedKitData.length + 1)).values = calculatedKitData;\r\n      //Add the total  Revenue to the sheet\r\n      // const revenueLedger = calcRevenue(packages.emk1, salesHistory, projectedSales);\r\n      // console.log(revenueLedger);\r\n      //Get the drugs that belong to each Kit\r\n      data.values.forEach((row) => {\r\n        row[8] === \"X\" ? emkDetails[\"EMK1\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[9] === \"X\" ? emkDetails[\"EMK5\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[10] === \"X\" ? emkDetails[\"EMK10\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[11] === \"X\" ? emkDetails[\"EMK15\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[12] === \"X\" ? emkDetails[\"EMK1-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[13] === \"X\" ? emkDetails[\"EMK10-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n      });\r\n      //Creating calculation for all drugs per month\r\n      let newKitDrugPredictions = [];\r\n      Object.keys(salesHistory).forEach((month) => {\r\n        let totalKitAmount = salesHistory[month];\r\n        Object.keys(emkDetails).forEach((kit) => {\r\n          let kitAmount = Math.floor(totalKitAmount * emkDetails[kit].newKitShares);\r\n          if (kitAmount < 1) return;\r\n          emkDetails[kit].drugs.forEach((drug) => {\r\n            if (medsObj[drug].shelfLife == \"\" || medsObj[drug].shelfLife == \"N/A\") return;\r\n            newKitDrugPredictions.push([\r\n              month,\r\n              kit,\r\n              drug,\r\n              kitAmount,\r\n              medsObj[drug].laCarte * kitAmount,\r\n              medsObj[drug].shelfLife,\r\n            ]);\r\n          });\r\n        });\r\n      });\r\n\r\n      //Adding Replenish Dates to the Drug Details\r\n      const updatedDrugData = newKitDrugPredictions.map((row) => {\r\n        const [date, code, description, qty, total, expiryDays] = row;\r\n        const [year, month] = date.split(\"-\").map(Number);\r\n        const baseDate = new Date(year, month - 1);\r\n\r\n        const replenishments = [];\r\n\r\n        for (let i = 1; i <= 10; i++) {\r\n          const expireDate = new Date(baseDate);\r\n          expireDate.setDate(expireDate.getDate() + expiryDays * i);\r\n\r\n          const expireYear = expireDate.getFullYear();\r\n          const expireMonth = String(expireDate.getMonth() + 1).padStart(2, \"0\");\r\n\r\n          replenishments.push(`${expireYear}-${expireMonth}`);\r\n        }\r\n\r\n        return [...row, ...replenishments];\r\n      });\r\n      drugsExpirationPredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        updatedDrugData.length,\r\n        updatedDrugData[0].length\r\n      ).values = updatedDrugData;\r\n      //Get the history of auto replenishments\r\n        // Get the used range of the worksheet\r\n      // const autoReplenishmentsHistroyusedRange = wsAutoReplenishHistroy.getUsedRange();\r\n      // usedRange.load(\"values\");\r\n\r\n      //   await context.sync();\r\n      // const firstDataRow = usedRange.values[1];\r\n      // let column = getAutoReplenishmentHistoryColumn(firstDataRow);\r\n      // if(column !== -1){\r\n      //   //Add it to the column number \r\n      // }\r\n      // else{\r\n\r\n      // }\r\n      // --- Step 5: Execute everything\r\n      const baseMap = getBaseKitMap(calculatedKitData);\r\n      const forecastMap = generateForecast(\"2025-07\", 300, baseMap);\r\n\r\n      // Plug in your generated updatedDrugData (with replenishment dates)\r\n      let drugDataMap = applyDrugDataRevenue(forecastMap, updatedDrugData);\r\n      let usedRangeAutoReplenishMedGroups = wsAutoReplenishMedGroups.getUsedRange();\r\n      let lastRowAutoReplenishMedGroups = usedRangeAutoReplenishMedGroups.getLastRow();\r\n      lastRowAutoReplenishMedGroups.load(\"rowIndex\");\r\n      await context.sync();\r\n      //Get Autor replenish sheet data\r\n      let rangeAutoReplenishMedGroupsAll = wsAutoReplenishMedGroups.getRangeByIndexes(\r\n        2,\r\n        0,\r\n        lastRowAutoReplenishMedGroups.rowIndex - 1,\r\n        6\r\n      );\r\n      rangeAutoReplenishMedGroupsAll.load(\"values\");\r\n      await context.sync();\r\n      //TODO\r\n      //Add the Future expiration dates for the auto replenishments\r\n      const outputAutoReplenishAndForecast = [\r\n        [\r\n          \"Group\",\r\n          \"Company\",\r\n          \"Medication\",\r\n          \"Expiration\",\r\n          \"Price\",\r\n          \"Auto Replenish\",\r\n          \"Generated Dates\",\r\n        ],\r\n      ];\r\n      // wsAutoReplenishMedGroupsAndPredictions.getUsedRange().clear(Excel.ClearApplyTo.contents);\r\n      for (const row of rangeAutoReplenishMedGroupsAll.values) {\r\n        const [group, company, medication, expirationStr, price, autoReplenish] = row;\r\n\r\n        if (autoReplenish !== \"Enabled\" || expirationStr == \"N/A\" || expirationStr == \"\") continue;\r\n\r\n        const config = medsObj[medication];\r\n        const baseDate = excelSerialDateToJSDate(expirationStr);\r\n\r\n        // Always include original\r\n        outputAutoReplenishAndForecast.push([\r\n          group,\r\n          company,\r\n          medication,\r\n          baseDate ? formatMonth(baseDate) : \"N/A\",\r\n          price,\r\n          autoReplenish,\r\n          \"\",\r\n        ]);\r\n\r\n        if (!config || !baseDate){ \r\n      \r\n          continue\r\n        };\r\n\r\n        const { shelfLife, laCarte: configPrice } = config;\r\n\r\n        for (let i = 1; i <= 20; i++) {\r\n          const futureDate = addDays(baseDate, shelfLife * i);\r\n          outputAutoReplenishAndForecast.push([\r\n            group,\r\n            company,\r\n            medication,\r\n            formatMonth(futureDate),\r\n            parseFloat(price.toFixed(2)),\r\n            autoReplenish,\r\n            \"Generated\",\r\n          ]);\r\n        }\r\n      }\r\n\r\n\r\n      // Auto-replenish items (only applied once)\r\n      let autoReplenish = applyAutoReplenishOnce(forecastMap, outputAutoReplenishAndForecast);\r\n      console.log(drugDataMap, baseMap, autoReplenish);\r\n      // 1. Combine all unique months\r\n\r\n      // --- Step 6: Final Output\r\n      // const finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\r\n\r\n      const allMonths = new Set([\r\n        ...drugDataMap.keys(),\r\n        ...autoReplenish.keys(),\r\n        ...baseMap.keys(),\r\n        ...forecastMap.keys(),\r\n      ]);\r\n\r\n      // 2. Generate final forecast array\r\n      const finalRevenueForecast = [];\r\n\r\n      for (const month of [...allMonths].sort()) {\r\n        const newkit = baseMap.get(month) || 0;\r\n        const auto = autoReplenish.get(month) || 0;\r\n        const drugData = drugDataMap.get(month) || 0;\r\n        const totalRevenue = newkit + auto + drugData;\r\n\r\n        finalRevenueForecast.push([month, totalRevenue, newkit, auto, drugData]);\r\n      }\r\n\r\n      wsRevenuePredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        finalRevenueForecast.length,\r\n        finalRevenueForecast[0].length\r\n      ).values = finalRevenueForecast;\r\n      await context.sync();\r\n      console.table(finalRevenueForecast);\r\n\r\n      //AutoReplenish History\r\n      let autoReplenishDatesAndData = getDatesAndData(finalRevenueForecast);\r\n      const sheet = context.workbook.worksheets.getItem(\"AutoReplenishHistory\");\r\n    //Get last column\r\n    const autoReplenishHistoryUsedRange = sheet.getUsedRange();\r\n  autoReplenishHistoryUsedRange.load([\"columnIndex\", \"columnCount\",\"rowCount\"]);\r\n  await context.sync();\r\n        // Load row 2 headers (row index 1)\r\n    if(autoReplenishHistoryUsedRange.columnCount <=1) return //There is no data.\r\n    const headerRange = sheet.getRangeByIndexes(1, 1, 1, autoReplenishHistoryUsedRange.columnCount-1);\r\n    const datesRange = sheet.getRangeByIndexes(2,0,autoReplenishHistoryUsedRange.rowCount-2,1);\r\n    headerRange.load(\"values\");\r\n    datesRange.load(\"values\");\r\n    await context.sync();\r\n    console.log(datesRange.values)\r\n    const headers = headerRange.values[0] // Row 2\r\n    let currentMonth = formatDateWithDay(new Date());\r\n    let currentMonthPostion = headers.indexOf(currentMonth) \r\n    let   datesInHistory = datesRange.values.map(x=>x[0]);\r\n    let beginningDateIndex = datesInHistory.indexOf(autoReplenishDatesAndData[0][0]);\r\n    console.log(currentMonth=headers[0])\r\n    await context.sync();\r\n    //Check if it exists in the headers\r\n    if(currentMonthPostion !== -1){ //it Exists\r\n      //Add data to the same column\r\n      sheet.getRangeByIndexes(2+beginningDateIndex,currentMonthPostion+1,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[1]])\r\n      sheet.getRangeByIndexes(2+beginningDateIndex,0,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[0]])\r\n      \r\n    }\r\n    else{\r\n      //Add data to a new column(The last column) starting at index 1 \r\n      //Get the position in the dates column of the current starting date in the date array parameter\r\n      //Add dates to it and add the data from the index of that row\r\n      const currentMonthFormatted = formatDateWithDay(new Date());\r\n\r\n    sheet.getRangeByIndexes(1, autoReplenishHistoryUsedRange.columnCount, 1, 1).numberFormat = [[\"@\"]]; // force text\r\n    sheet.getRangeByIndexes(1, autoReplenishHistoryUsedRange.columnCount, 1, 1).values = [[currentMonthFormatted]];\r\n    sheet.getRangeByIndexes(2+beginningDateIndex,autoReplenishHistoryUsedRange.columnCount,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[1]])\r\n    sheet.getRangeByIndexes(2+beginningDateIndex,0,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[0]])\r\n    }\r\n        \r\n    await context.sync();\r\n\r\n      \r\n      // const BATCH_SIZE = 10000;\r\n\r\n      // for (let startRow = 0; startRow < outputAutoReplenishAndForecast.length; startRow += BATCH_SIZE) {\r\n      //     const chunk = outputAutoReplenishAndForecast.slice(startRow, startRow + BATCH_SIZE);\r\n          \r\n      //     wsAutoReplenishMedGroupsAndPredictions\r\n      //         .getRangeByIndexes(startRow, 0, chunk.length, chunk[0].length)\r\n      //         .values = chunk;\r\n      \r\n      //     await context.sync();\r\n      // }\r\n      \r\n      return context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\nfunction getDatesAndData(foreCastData=[[]]){\r\n  return foreCastData.map(\r\n    x => [x[0],x[3]]\r\n  )\r\n}\r\nfunction getBaseKitMap(baseKitRevenue) {\r\n  const map = new Map();\r\n\r\n  const now = new Date();\r\n  const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 1); // First day of next month\r\n\r\n  baseKitRevenue.forEach(([dateStr, kitQuantity, revenue]) => {\r\n    const date = excelSerialDateToJSDate(dateStr);\r\n    console.log(\"Here we are\")\r\n    if (date >= nextMonth) {\r\n      const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\r\n      map.set(key, revenue);\r\n    }\r\n  });\r\n\r\n  return map;\r\n}\r\n\r\n\r\n// --- Step 2: Forecast structure (June 2023 → May 2033)\r\nfunction generateForecast(start = \"2023-06\", months = 120, baseMap = new Map()) {\r\n  const forecast = new Map();\r\n  const [startYear, startMonth] = start.split(\"-\").map(Number);\r\n  const date = new Date(startYear, startMonth - 1);\r\n\r\n  for (let i = 0; i < months; i++) {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const key = `${year}-${month}`;\r\n    const baseRevenue = baseMap.get(key) || 0;\r\n    forecast.set(key, baseRevenue);\r\n    date.setMonth(date.getMonth() + 1);\r\n  }\r\n\r\n  return forecast;\r\n}\r\n\r\n// --- Step 3: Add drugData replenishment costs\r\nfunction applyDrugDataRevenue(forecastMap, drugData) {\r\n  let drugDataMap = new Map();\r\n  for (const row of drugData) {\r\n    const total = parseFloat(row[4]);\r\n    const replenishmentDates = row.slice(6);\r\n    // dynamically added dates\r\n    replenishmentDates.forEach((date) => {\r\n      if (forecastMap.has(date)) {\r\n        forecastMap.set(date, forecastMap.get(date) + total);\r\n        drugDataMap.set(\r\n          date,\r\n          drugDataMap.get(date) != undefined ? drugDataMap.get(date) + total : total\r\n        );\r\n      }\r\n    });\r\n  }\r\n  return drugDataMap;\r\n}\r\n\r\n// --- Step 4: Add Auto Replenish (just once, at expiration date)\r\nfunction applyAutoReplenishOnce(forecastMap, autoData) {\r\n  let autoReplenish = new Map();\r\n  autoData.forEach((row) => {\r\n    const [Group, Company, Medication, expDate, priceStr, status] = row;\r\n\r\n    if (status !== \"Enabled\") return;\r\n    const price = typeof priceStr == \"string\" ? parseFloat(priceStr.replace(\"$\", \"\")) : priceStr;\r\n\r\n    // const [expMonth, , expYear] = expDate.split(\"/\").map(Number);\r\n    // const key = `${expYear}-${String(expMonth).padStart(2, '0')}`;\r\n    const date = new parseMonth(expDate);\r\n    const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\r\n    if (forecastMap.has(key)) {\r\n      if (!isNaN(price)) {\r\n        forecastMap.set(key, forecastMap.get(key) + price);\r\n        autoReplenish.set(\r\n          key,\r\n          autoReplenish.get(key) !== undefined ? autoReplenish.get(key) + price : price\r\n        );\r\n      }\r\n    }\r\n  });\r\n  return autoReplenish;\r\n}\r\n\r\n// // --- Step 5: Execute everything\r\n// const baseMap = getBaseKitMap(baseKitRevenue);\r\n// const forecastMap = generateForecast(\"2023-06\", 120, baseMap);\r\n\r\n// // Plug in your generated updatedDrugData (with replenishment dates)\r\n// applyDrugDataRevenue(forecastMap, updatedDrugData);\r\n\r\n// // Auto-replenish items (only applied once)\r\n// applyAutoReplenishOnce(forecastMap, [\r\n//   [\"42\", \"Dental Depot\", \"Insta-Glucose\", \"2/28/2026\", \"$10.85\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Nitroglycerin Sublingual Tablets 0.4 mg\", \"5/31/2026\", \"$46.71\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Albuterol Sulfate (60 doses)\", \"5/31/2026\", \"$79.61\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Ammonia Towelette\", \"3/31/2027\", \"$14.08\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Naloxone HCL 0.4 mg/mL\", \"4/30/2026\", \"$43.45\", \"Enabled\"],\r\n// ]);\r\n\r\n// // --- Step 6: Final Output\r\n// const finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\r\n// console.table(finalRevenueForecast);\r\n\r\n// ─── Helpers ────────────────────────────────────────────────────────────────\r\nfunction parseMonth(ym) {\r\n  // More robust parsing of YYYY-MM strings\r\n  const [y, m] = ym.split(\"-\").map(Number);\r\n  return new Date(Date.UTC(y, m - 1, 1));\r\n}\r\n// Instead of using new Date() directly:\r\nfunction getCurrentMonthUTC() {\r\n  const now = new Date();\r\n  return new Date(Date.UTC(now.getFullYear(), now.getMonth(), 1));\r\n}\r\nfunction formatMonth(dt) {\r\n  const y = dt.getUTCFullYear(),\r\n    m = String(dt.getUTCMonth() + 1).padStart(2, \"0\");\r\n  return `${y}-${m}`;\r\n}\r\nfunction addDays(dt, n) {\r\n  return new Date(dt.valueOf() + n * 864e5);\r\n}\r\nfunction addMonths(dt, n) {\r\n  const y = dt.getUTCFullYear(),\r\n    mo = dt.getUTCMonth() + n;\r\n  return new Date(Date.UTC(y + Math.floor(mo / 12), mo % 12, 1));\r\n}\r\nfunction generateProjections(start, end, perMonth) {\r\n  const result = {};\r\n  let cur = parseMonth(start),\r\n    last = parseMonth(end);\r\n  while (cur <= last) {\r\n    result[formatMonth(cur)] = perMonth;\r\n    cur = addMonths(cur, 1);\r\n  }\r\n  return result;\r\n}\r\nfunction formatDate(date) {\r\n  // Always use UTC to avoid timezone issues\r\n  const year = date.getUTCFullYear();\r\n  const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\r\n  return `${year}-${month}`;\r\n}\r\nfunction formatDateWithDay(date) {\r\n  // Always use UTC to avoid timezone issues\r\n  const year = date.getUTCFullYear();\r\n  const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\r\n  const day = date.getUTCDate()\r\n  return `${year}-${month}-${day}`;\r\n}\r\nfunction excelSerialDateToJSDate(serial) {\r\n  // UTC-based conversion to avoid timezone issues\r\n  const utcDays = Math.floor(serial - 25569); // 25569 = days between 1900 and 1970\r\n  const utcValue = utcDays * 86400; // 86400 = seconds per day\r\n  const dateInfo = new Date(utcValue * 1000);\r\n  \r\n  // Create a new date using UTC values to avoid timezone offset\r\n  return new Date(Date.UTC(\r\n      dateInfo.getUTCFullYear(),\r\n      dateInfo.getUTCMonth(),\r\n      dateInfo.getUTCDate()\r\n  ));\r\n}\r\n/**\r\n * @param {Array} headers - List of dates structures as month-year\r\n * \r\n */\r\nfunction getAutoReplenishmentHistoryColumn(headers){\r\n  let currentDate = new Date();\r\n  let dateStr= formatDate(currentDate);\r\n  //Check the headers of the sheet to see if the date already exists\r\n\r\n  let index =  headers.indexOf(dateStr);\r\n  return index\r\n}\r\n// ─── run it ────────────────────────────────────────────────────────────────\r\nasync function insertOrReplaceDataByHeader(dates, Data =[300,800]) {\r\n  await Excel.run(async (context) => {\r\n    const sheet = context.workbook.worksheets.getItem(\"AutoReplenishHistory\");\r\n    //Get last column\r\n    const usedRange = sheet.getUsedRange();\r\n  usedRange.load([\"columnIndex\", \"columnCount\"]);\r\n  await context.sync();\r\n        // Load row 2 headers (row index 1)\r\n        if(usedRange.columnCount <=1) return //There is no data.\r\n    const headerRange = sheet.getRangeByIndexes(1, 1, 1, usedRange.columnCount-1);\r\n    headerRange.load(\"values\");\r\n    await context.sync();\r\n    console.log(headerRange.values)\r\n    const headers = headerRange.values[0] // Row 2\r\n    let currentMonth = formatDate(getCurrentMonthUTC());\r\n    let currentMonthPostion = headers.indexOf(currentMonth) \r\n    console.log(currentMonth=headers[0])\r\n    //Check if it exists in the headers\r\n    if(currentMonthPostion !== -1){ //it Exists\r\n      //Add data to the same column\r\n      console.log(Data.map(x=>[x]))\r\n      sheet.getRangeByIndexes(2,currentMonthPostion+1,Data.length,1).values = Data.map(x=>[x])\r\n    }\r\n    else{\r\n      //Add data to a new column(The last column) starting at index 1 \r\n      //Get the position in the dates column of the current starting date in the date array parameter\r\n      //Add dates to it and add the data from the index of that row\r\n    }\r\n        await context.sync();\r\n  });\r\n}\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Protect It First Functions</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header style=\\\"display:flex;justify-content:center;align-items:center;height:20vh\\\"> <h1 class=\\\"ms-font-su\\\">Functions</h1> </header> <div style=\\\"padding:10px\\\"> <div style=\\\"padding:10px;border:1px dashed #000\\\"> <h1>Revenue Predictions</h1> <h2>Instructions</h2> <ol> <li>Please Don't rename the sheets </li> <li>Keep the format of the sheets constant.</li> <li>Drug Replenish Dates(New Kits) & Revenue Prediction contain the Drug replenishment dates and Revenue Predictions respectively</li> <li>To Create the prediction click the button below</li> </ol> <div id=\\\"run\\\" style=\\\"padding:10px;background-color:#6495ed;color:#fff;cursor:pointer;text-align:center;font-weight:700\\\"> <span class=\\\"ms-Button-label\\\" style=\\\"text-align:center\\\">Create Revenue Predictions</span> </div> </div> </div> <p><label id=\\\"item-subject\\\"></label></p>  </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","configurable","writable","_invoke","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","s","next","_slicedToArray","_arrayWithHoles","push","_iterableToArrayLimit","_nonIterableRest","toString","slice","constructor","name","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","run","_run","_callee2","_t2","_context2","Excel","_ref3","_callee","context","ws","packageDetails","packageDetailsRange","usedRange","drugsExpirationPredictions","wsAutoReplenishMedGroups","wsRevenuePredictions","lastRow","data","packageDetailsData","medsObj","emkDetails","wsNewKit","newKitsLastRow","newKitsLastRowIndex","dataRange","newKitData","salesHistory","calculatedKitData","newKitDrugPredictions","updatedDrugData","baseMap","forecastMap","drugDataMap","usedRangeAutoReplenishMedGroups","lastRowAutoReplenishMedGroups","rangeAutoReplenishMedGroupsAll","outputAutoReplenishAndForecast","_iterator2","_step2","row","_row3","group","company","medication","expirationStr","price","_autoReplenish","config","baseDate","shelfLife","futureDate","autoReplenish","allMonths","finalRevenueForecast","_iterator3","_step3","month","newkit","auto","drugData","totalRevenue","autoReplenishDatesAndData","sheet","autoReplenishHistoryUsedRange","headerRange","datesRange","headers","currentMonth","currentMonthPostion","datesInHistory","beginningDateIndex","currentMonthFormatted","_t","_context","workbook","worksheets","getItem","getRange","getUsedRange","getLastRow","getRangeByIndexes","clear","ClearApplyTo","contents","load","sync","rowIndex","concat","values","console","log","forEach","totalUnitCost","laCarte","includedInPackages","trim","retailPrice","newKitShares","purchasePrice","drugs","map","formatDate","excelSerialDateToJSDate","numberOfKits","EMK1","Math","floor","EMK5","EMK10","EMK15","EMK1Mini","EMK10Mini","keys","totalKitAmount","kit","kitAmount","drug","_row2","date","expiryDays","_date$split$map2","split","Number","year","Date","replenishments","expireDate","setDate","getDate","expireYear","getFullYear","expireMonth","String","getMonth","padStart","getBaseKitMap","generateForecast","applyDrugDataRevenue","formatMonth","valueOf","parseFloat","toFixed","applyAutoReplenishOnce","Set","sort","err","table","getDatesAndData","columnCount","rowCount","formatDateWithDay","indexOf","x","numberFormat","_x2","error","baseKitRevenue","Map","now","nextMonth","_ref","_ref2","dateStr","revenue","set","start","months","forecast","_start$split$map2","startYear","startMonth","baseRevenue","setMonth","_step","_iterator","_loop","total","has","autoData","_row","expDate","priceStr","parseMonth","isNaN","ym","_ym$split$map2","UTC","dt","getUTCFullYear","getUTCMonth","day","getUTCDate","serial","utcDays","dateInfo","Office","onReady","info","host","HostType","getElementById","onclick","URL"],"sourceRoot":""}