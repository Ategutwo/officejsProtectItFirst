{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    document.getElementById(\"run\").onclick = run;\r\n  }\r\n});\r\n\r\nexport async function run() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      let ws = context.workbook.worksheets.getItem(\"DrugDetails\");\r\n      let packageDetails = context.workbook.worksheets.getItem(\"packageDistribution\");\r\n      let packageDetailsRange = packageDetails.getRange(\"A2:D7\");\r\n      let usedRange = ws.getUsedRange().getLastRow();\r\n      let drugsExpirationPredictions = context.workbook.worksheets.getItem(\r\n        \"Drug Replenish Dates(New Kits)\"\r\n      );\r\n      let wsAutoReplenishMedGroups = context.workbook.worksheets.getItem(\r\n        \"auto_replenish_med_groups\"\r\n      );\r\n      let wsRevenuePredictions = context.workbook.worksheets.getItem(\"Revenue Prediction\");\r\n      // let wsAutoReplenishMedGroupsAndPredictions = context.workbook.worksheets.getItem(\r\n      //   \"autoReplenish+Predictions\"\r\n      // );\r\n      wsRevenuePredictions.getRangeByIndexes(1, 0, 10000, 50).clear(Excel.ClearApplyTo.contents);\r\n      drugsExpirationPredictions\r\n        .getRangeByIndexes(1, 0, 10000, 50)\r\n        .clear(Excel.ClearApplyTo.contents);\r\n      //Get the Details\r\n      usedRange.load(\"rowIndex\");\r\n      await context.sync();\r\n      let lastRow = usedRange.rowIndex;\r\n      let data = ws.getRange(`B${1}:O${lastRow + 1}`);\r\n      data.load(\"values\");\r\n      packageDetailsRange.load(\"values\");\r\n      await context.sync();\r\n      let packageDetailsData = packageDetailsRange.values;\r\n      let medsObj = {};\r\n      let emkDetails = {};\r\n      //Get the drug details\r\n      console.log(data.values);\r\n      data.values.forEach((row) => {\r\n        medsObj[row[0]] = {\r\n          totalUnitCost: row[3],\r\n          laCarte: row[4],\r\n          includedInPackages: [],\r\n          shelfLife: row[7],\r\n        };\r\n        for (let i = 8; i <= 13; i++) {\r\n          if (row[i].toString().trim() !== \"\") {\r\n            medsObj[row[0]].includedInPackages.push(data.values[0][i]);\r\n          }\r\n        }\r\n      });\r\n\r\n      packageDetailsData.forEach((row) => {\r\n        //Create the emk objecst\r\n        emkDetails[row[0]] = {\r\n          retailPrice: row[1],\r\n          newKitShares: row[2],\r\n          purchasePrice: row[3],\r\n          drugs: [],\r\n        };\r\n      });\r\n      // console.log(medsObj,emkDetails)\r\n\r\n      //Get the New Kit Data\r\n      let wsNewKit = context.workbook.worksheets.getItem(\"New Kit Data\");\r\n      let newKitsLastRow = wsNewKit.getUsedRange().getLastRow();\r\n      newKitsLastRow.load(\"rowIndex\");\r\n      await context.sync();\r\n      let newKitsLastRowIndex = newKitsLastRow.rowIndex;\r\n      let dataRange = wsNewKit.getRange(`A2:B${newKitsLastRowIndex + 1}`);\r\n      dataRange.load(\"values\");\r\n      await context.sync();\r\n      let newKitData = dataRange.values;\r\n      let salesHistory = {};\r\n      //Get the Kit Revenue for each Kit and total Revenue\r\n      let calculatedKitData = newKitData.map((row) => {\r\n        salesHistory[formatDate(excelSerialDateToJSDate(row[0]))] = row[1];\r\n        let numberOfKits = row[1];\r\n        let EMK1 =\r\n          Math.floor(emkDetails[\"EMK1\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1\"].retailPrice;\r\n        let EMK5 =\r\n          Math.floor(emkDetails[\"EMK5\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK5\"].retailPrice;\r\n        let EMK10 =\r\n          Math.floor(emkDetails[\"EMK10\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10\"].retailPrice;\r\n        let EMK15 =\r\n          Math.floor(emkDetails[\"EMK15\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK15\"].retailPrice;\r\n        let EMK1Mini =\r\n          Math.floor(emkDetails[\"EMK1-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1-Mini\"].retailPrice;\r\n        let EMK10Mini =\r\n          Math.floor(emkDetails[\"EMK10-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10-Mini\"].retailPrice;\r\n        return [\r\n          row[0],\r\n          row[1],\r\n          EMK1 + EMK5 + EMK10 + EMK15 + EMK1Mini + EMK10Mini,\r\n          \"\",\r\n          EMK1,\r\n          EMK5,\r\n          EMK10,\r\n          EMK15,\r\n          EMK1Mini,\r\n          EMK10Mini,\r\n        ];\r\n      });\r\n      //Add the Kit Revenue to the sheet\r\n\r\n      wsNewKit.getRange(\"A2:J\" + (calculatedKitData.length + 1)).values = calculatedKitData;\r\n      //Add the total  Revenue to the sheet\r\n      // const revenueLedger = calcRevenue(packages.emk1, salesHistory, projectedSales);\r\n      // console.log(revenueLedger);\r\n      //Get the drugs that belong to each Kit\r\n      data.values.forEach((row) => {\r\n        row[8] === \"X\" ? emkDetails[\"EMK1\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[9] === \"X\" ? emkDetails[\"EMK5\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[10] === \"X\" ? emkDetails[\"EMK10\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[11] === \"X\" ? emkDetails[\"EMK15\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[12] === \"X\" ? emkDetails[\"EMK1-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[13] === \"X\" ? emkDetails[\"EMK10-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n      });\r\n      //Creating calculation for all drugs per month\r\n      let newKitDrugPredictions = [];\r\n      Object.keys(salesHistory).forEach((month) => {\r\n        let totalKitAmount = salesHistory[month];\r\n        Object.keys(emkDetails).forEach((kit) => {\r\n          let kitAmount = Math.floor(totalKitAmount * emkDetails[kit].newKitShares);\r\n          if (kitAmount < 1) return;\r\n          emkDetails[kit].drugs.forEach((drug) => {\r\n            if (medsObj[drug].shelfLife == \"\" || medsObj[drug].shelfLife == \"N/A\") return;\r\n            newKitDrugPredictions.push([\r\n              month,\r\n              kit,\r\n              drug,\r\n              kitAmount,\r\n              medsObj[drug].laCarte * kitAmount,\r\n              medsObj[drug].shelfLife,\r\n            ]);\r\n          });\r\n        });\r\n      });\r\n\r\n      //Adding Replenish Dates to the Drug Details\r\n      const updatedDrugData = newKitDrugPredictions.map((row) => {\r\n        const [date, code, description, qty, total, expiryDays] = row;\r\n        const [year, month] = date.split(\"-\").map(Number);\r\n        const baseDate = new Date(year, month - 1);\r\n\r\n        const replenishments = [];\r\n\r\n        for (let i = 1; i <= 10; i++) {\r\n          const expireDate = new Date(baseDate);\r\n          expireDate.setDate(expireDate.getDate() + expiryDays * i);\r\n\r\n          const expireYear = expireDate.getFullYear();\r\n          const expireMonth = String(expireDate.getMonth() + 1).padStart(2, \"0\");\r\n\r\n          replenishments.push(`${expireYear}-${expireMonth}`);\r\n        }\r\n\r\n        return [...row, ...replenishments];\r\n      });\r\n      drugsExpirationPredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        updatedDrugData.length,\r\n        updatedDrugData[0].length\r\n      ).values = updatedDrugData;\r\n\r\n      // --- Step 5: Execute everything\r\n      const baseMap = getBaseKitMap(calculatedKitData);\r\n      const forecastMap = generateForecast(\"2025-07\", 300, baseMap);\r\n\r\n      // Plug in your generated updatedDrugData (with replenishment dates)\r\n      let drugDataMap = applyDrugDataRevenue(forecastMap, updatedDrugData);\r\n      let usedRangeAutoReplenishMedGroups = wsAutoReplenishMedGroups.getUsedRange();\r\n      let lastRowAutoReplenishMedGroups = usedRangeAutoReplenishMedGroups.getLastRow();\r\n      lastRowAutoReplenishMedGroups.load(\"rowIndex\");\r\n      await context.sync();\r\n      //Get Autor replenish sheet data\r\n      let rangeAutoReplenishMedGroups = wsAutoReplenishMedGroups.getRange(\"D2:F22011\");\r\n      let rangeAutoReplenishMedGroupsAll = wsAutoReplenishMedGroups.getRangeByIndexes(\r\n        2,\r\n        0,\r\n        lastRowAutoReplenishMedGroups.rowIndex - 1,\r\n        6\r\n      );\r\n      rangeAutoReplenishMedGroups.load(\"values\");\r\n      rangeAutoReplenishMedGroupsAll.load(\"values\");\r\n      await context.sync();\r\n      //TODO\r\n      //Add the Future expiration dates for the auto replenishments\r\n      const outputAutoReplenishAndForecast = [\r\n        [\r\n          \"Group\",\r\n          \"Company\",\r\n          \"Medication\",\r\n          \"Expiration\",\r\n          \"Price\",\r\n          \"Auto Replenish\",\r\n          \"Generated Dates\",\r\n        ],\r\n      ];\r\n      console.log(rangeAutoReplenishMedGroupsAll.values);\r\n      // wsAutoReplenishMedGroupsAndPredictions.getUsedRange().clear(Excel.ClearApplyTo.contents);\r\n      for (const row of rangeAutoReplenishMedGroupsAll.values) {\r\n        const [group, company, medication, expirationStr, price, autoReplenish] = row;\r\n\r\n        if (autoReplenish !== \"Enabled\" || expirationStr == \"N/A\" || expirationStr == \"\") continue;\r\n\r\n        const config = medsObj[medication];\r\n        const baseDate = excelSerialDateToJSDate(expirationStr);\r\n\r\n        // Always include original\r\n        outputAutoReplenishAndForecast.push([\r\n          group,\r\n          company,\r\n          medication,\r\n          baseDate ? formatMonth(baseDate) : \"N/A\",\r\n          price,\r\n          autoReplenish,\r\n          \"\",\r\n        ]);\r\n\r\n        if (!config || !baseDate) continue;\r\n\r\n        const { shelfLife, laCarte: configPrice } = config;\r\n\r\n        for (let i = 1; i <= 20; i++) {\r\n          const futureDate = addDays(baseDate, shelfLife * i);\r\n          outputAutoReplenishAndForecast.push([\r\n            group,\r\n            company,\r\n            medication,\r\n            formatMonth(futureDate),\r\n            parseFloat(price.toFixed(2)),\r\n            autoReplenish,\r\n            \"Generated\",\r\n          ]);\r\n        }\r\n      }\r\n\r\n\r\n      // Auto-replenish items (only applied once)\r\n      let autoReplenish = applyAutoReplenishOnce(forecastMap, outputAutoReplenishAndForecast);\r\n      console.log(drugDataMap, baseMap, autoReplenish);\r\n      // 1. Combine all unique months\r\n\r\n      // --- Step 6: Final Output\r\n      // const finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\r\n\r\n      const allMonths = new Set([\r\n        ...drugDataMap.keys(),\r\n        ...autoReplenish.keys(),\r\n        ...baseMap.keys(),\r\n        ...forecastMap.keys(),\r\n      ]);\r\n\r\n      // 2. Generate final forecast array\r\n      const finalRevenueForecast = [];\r\n\r\n      for (const month of [...allMonths].sort()) {\r\n        const newkit = baseMap.get(month) || 0;\r\n        const auto = autoReplenish.get(month) || 0;\r\n        const drugData = drugDataMap.get(month) || 0;\r\n        const totalRevenue = newkit + auto + drugData;\r\n\r\n        finalRevenueForecast.push([month, totalRevenue, newkit, auto, drugData]);\r\n      }\r\n\r\n      wsRevenuePredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        finalRevenueForecast.length,\r\n        finalRevenueForecast[0].length\r\n      ).values = finalRevenueForecast;\r\n      await context.sync();\r\n      console.table(finalRevenueForecast);\r\n      \r\n      // const BATCH_SIZE = 10000;\r\n\r\n      // for (let startRow = 0; startRow < outputAutoReplenishAndForecast.length; startRow += BATCH_SIZE) {\r\n      //     const chunk = outputAutoReplenishAndForecast.slice(startRow, startRow + BATCH_SIZE);\r\n          \r\n      //     wsAutoReplenishMedGroupsAndPredictions\r\n      //         .getRangeByIndexes(startRow, 0, chunk.length, chunk[0].length)\r\n      //         .values = chunk;\r\n      \r\n      //     await context.sync();\r\n      // }\r\n      \r\n      return context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nfunction getBaseKitMap(baseKitRevenue) {\r\n  const map = new Map();\r\n\r\n  const now = new Date();\r\n  const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 1); // First day of next month\r\n\r\n  baseKitRevenue.forEach(([dateStr, kitQuantity, revenue]) => {\r\n    const date = excelSerialDateToJSDate(dateStr);\r\n    console.log(\"Here we are\")\r\n    if (date >= nextMonth) {\r\n      const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\r\n      map.set(key, revenue);\r\n    }\r\n  });\r\n\r\n  return map;\r\n}\r\n\r\n\r\n// --- Step 2: Forecast structure (June 2023 → May 2033)\r\nfunction generateForecast(start = \"2023-06\", months = 120, baseMap = new Map()) {\r\n  const forecast = new Map();\r\n  const [startYear, startMonth] = start.split(\"-\").map(Number);\r\n  const date = new Date(startYear, startMonth - 1);\r\n\r\n  for (let i = 0; i < months; i++) {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const key = `${year}-${month}`;\r\n    const baseRevenue = baseMap.get(key) || 0;\r\n    forecast.set(key, baseRevenue);\r\n    date.setMonth(date.getMonth() + 1);\r\n  }\r\n\r\n  return forecast;\r\n}\r\n\r\n// --- Step 3: Add drugData replenishment costs\r\nfunction applyDrugDataRevenue(forecastMap, drugData) {\r\n  let drugDataMap = new Map();\r\n  for (const row of drugData) {\r\n    const total = parseFloat(row[4]);\r\n    const replenishmentDates = row.slice(6);\r\n    // dynamically added dates\r\n    replenishmentDates.forEach((date) => {\r\n      if (forecastMap.has(date)) {\r\n        forecastMap.set(date, forecastMap.get(date) + total);\r\n        drugDataMap.set(\r\n          date,\r\n          drugDataMap.get(date) != undefined ? drugDataMap.get(date) + total : total\r\n        );\r\n      }\r\n    });\r\n  }\r\n  return drugDataMap;\r\n}\r\n\r\n// --- Step 4: Add Auto Replenish (just once, at expiration date)\r\nfunction applyAutoReplenishOnce(forecastMap, autoData) {\r\n  let autoReplenish = new Map();\r\n  autoData.forEach((row) => {\r\n    const [Group, Company, Medication, expDate, priceStr, status] = row;\r\n\r\n    if (status !== \"Enabled\") return;\r\n    const price = typeof priceStr == \"string\" ? parseFloat(priceStr.replace(\"$\", \"\")) : priceStr;\r\n\r\n    // const [expMonth, , expYear] = expDate.split(\"/\").map(Number);\r\n    // const key = `${expYear}-${String(expMonth).padStart(2, '0')}`;\r\n    const date = new parseMonth(expDate);\r\n    const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\r\n    if (forecastMap.has(key)) {\r\n      if (!isNaN(price)) {\r\n        forecastMap.set(key, forecastMap.get(key) + price);\r\n        autoReplenish.set(\r\n          key,\r\n          autoReplenish.get(key) !== undefined ? autoReplenish.get(key) + price : price\r\n        );\r\n      }\r\n    }\r\n  });\r\n  return autoReplenish;\r\n}\r\n\r\n// // --- Step 5: Execute everything\r\n// const baseMap = getBaseKitMap(baseKitRevenue);\r\n// const forecastMap = generateForecast(\"2023-06\", 120, baseMap);\r\n\r\n// // Plug in your generated updatedDrugData (with replenishment dates)\r\n// applyDrugDataRevenue(forecastMap, updatedDrugData);\r\n\r\n// // Auto-replenish items (only applied once)\r\n// applyAutoReplenishOnce(forecastMap, [\r\n//   [\"42\", \"Dental Depot\", \"Insta-Glucose\", \"2/28/2026\", \"$10.85\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Nitroglycerin Sublingual Tablets 0.4 mg\", \"5/31/2026\", \"$46.71\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Albuterol Sulfate (60 doses)\", \"5/31/2026\", \"$79.61\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Ammonia Towelette\", \"3/31/2027\", \"$14.08\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\r\n//   [\"42\", \"Dental Depot\", \"Naloxone HCL 0.4 mg/mL\", \"4/30/2026\", \"$43.45\", \"Enabled\"],\r\n// ]);\r\n\r\n// // --- Step 6: Final Output\r\n// const finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\r\n// console.table(finalRevenueForecast);\r\n\r\n// ─── Helpers ────────────────────────────────────────────────────────────────\r\nfunction parseMonth(ym) {\r\n  const [y, m] = ym.split(\"-\").map(Number);\r\n  return new Date(Date.UTC(y, m - 1, 1));\r\n}\r\nfunction formatMonth(dt) {\r\n  const y = dt.getUTCFullYear(),\r\n    m = String(dt.getUTCMonth() + 1).padStart(2, \"0\");\r\n  return `${y}-${m}`;\r\n}\r\nfunction addDays(dt, n) {\r\n  return new Date(dt.valueOf() + n * 864e5);\r\n}\r\nfunction addMonths(dt, n) {\r\n  const y = dt.getUTCFullYear(),\r\n    mo = dt.getUTCMonth() + n;\r\n  return new Date(Date.UTC(y + Math.floor(mo / 12), mo % 12, 1));\r\n}\r\nfunction generateProjections(start, end, perMonth) {\r\n  const result = {};\r\n  let cur = parseMonth(start),\r\n    last = parseMonth(end);\r\n  while (cur <= last) {\r\n    result[formatMonth(cur)] = perMonth;\r\n    cur = addMonths(cur, 1);\r\n  }\r\n  return result;\r\n}\r\nfunction formatDate(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}`;\r\n}\r\nfunction excelSerialDateToJSDate(serial) {\r\n  const utc_days = Math.floor(serial - 25569);\r\n  const utc_value = utc_days * 86400;\r\n  const date = new Date(utc_value * 1000);\r\n\r\n  return date;\r\n}\r\n/**\r\n * @param {Array} headers - List of dates structures as month-year\r\n * \r\n */\r\nfunction populateAutoReplenishHistory(headers){\r\n  let currentDate = new Date();\r\n  let date = formatDate(currentDate);\r\n  //Check the headers of the sheet to see if the date already exists\r\n\r\n  //If it exists\r\n  //Add the data to the column where the date exists.\r\n\r\n  //if not\r\n  //add new column and the date to that column\r\n\r\n}\r\n// ─── run it ────────────────────────────────────────────────────────────────\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Protect It First Functions</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header style=\\\"display:flex;justify-content:center;align-items:center;height:20vh\\\"> <h1 class=\\\"ms-font-su\\\">Functions</h1> </header> <div style=\\\"padding:10px\\\"> <div style=\\\"padding:10px;border:1px dashed #000\\\"> <h1>Revenue Predictions</h1> <h2>Instructions</h2> <ol> <li>Please Don't rename the sheets </li> <li>Keep the format of the sheets constant.</li> <li>Drug Replenish Dates(New Kits) & Revenue Prediction contain the Drug replenishment dates and Revenue Predictions respectively</li> <li>To Create the prediction click the button below</li> </ol> <div id=\\\"run\\\" style=\\\"padding:10px;background-color:#6495ed;color:#fff;cursor:pointer;text-align:center;font-weight:700\\\"> <span class=\\\"ms-Button-label\\\" style=\\\"text-align:center\\\">Create Revenue Predictions</span> </div> </div> </div> <p><label id=\\\"item-subject\\\"></label></p>  </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","run","_run","_callee2","_context2","Excel","_ref3","_callee","context","ws","packageDetails","packageDetailsRange","usedRange","drugsExpirationPredictions","wsAutoReplenishMedGroups","wsRevenuePredictions","lastRow","data","packageDetailsData","medsObj","emkDetails","wsNewKit","newKitsLastRow","newKitsLastRowIndex","dataRange","newKitData","salesHistory","calculatedKitData","newKitDrugPredictions","updatedDrugData","baseMap","forecastMap","drugDataMap","usedRangeAutoReplenishMedGroups","lastRowAutoReplenishMedGroups","rangeAutoReplenishMedGroups","rangeAutoReplenishMedGroupsAll","outputAutoReplenishAndForecast","_iterator2","_step2","row","_row3","group","company","medication","expirationStr","price","_autoReplenish","config","baseDate","shelfLife","futureDate","autoReplenish","allMonths","finalRevenueForecast","_iterator3","_step3","month","newkit","auto","drugData","totalRevenue","_context","workbook","worksheets","getItem","getRange","getUsedRange","getLastRow","getRangeByIndexes","clear","ClearApplyTo","contents","load","sync","rowIndex","concat","console","log","totalUnitCost","laCarte","includedInPackages","trim","retailPrice","newKitShares","purchasePrice","drugs","map","formatDate","excelSerialDateToJSDate","numberOfKits","EMK1","Math","floor","EMK5","EMK10","EMK15","EMK1Mini","EMK10Mini","totalKitAmount","kit","kitAmount","drug","_row2","date","expiryDays","_date$split$map2","split","Number","year","Date","replenishments","expireDate","setDate","getDate","expireYear","getFullYear","expireMonth","String","getMonth","padStart","getBaseKitMap","generateForecast","applyDrugDataRevenue","formatMonth","valueOf","parseFloat","toFixed","t0","applyAutoReplenishOnce","Set","sort","err","table","_x","error","baseKitRevenue","Map","now","nextMonth","_ref","_ref2","dateStr","revenue","set","start","months","forecast","_start$split$map2","startYear","startMonth","baseRevenue","setMonth","_step","_iterator","_loop","total","has","autoData","_row","expDate","priceStr","parseMonth","ym","_ym$split$map2","UTC","dt","getUTCFullYear","getUTCMonth","serial","utc_days","Office","onReady","info","host","HostType","getElementById","onclick","URL"],"sourceRoot":""}