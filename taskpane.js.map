{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = (typeof document !== 'undefined' && document.baseURI) || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    document.getElementById(\"run\").onclick = run;\r\n  }\r\n});\r\n\r\nexport async function run() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      let ws = context.workbook.worksheets.getItem(\"DrugDetails\");\r\n      let packageDetails = context.workbook.worksheets.getItem(\"packageDistribution\");\r\n      let packageDetailsRange = packageDetails.getRange(\"A2:D7\");\r\n      let usedRange = ws.getUsedRange().getLastRow();\r\n      let wsAutoReplenishHistroy = context.workbook.worksheets.getItem(\"AutoReplenishHistory\");\r\n      let drugsExpirationPredictions = context.workbook.worksheets.getItem(\r\n        \"Drug Replenish Dates(New Kits)\"\r\n      );\r\n      let wsAutoReplenishMedGroups = context.workbook.worksheets.getItem(\r\n        \"auto_replenish_med_groups\"\r\n      );\r\n      let wsRevenuePredictions = context.workbook.worksheets.getItem(\"Revenue Prediction\");\r\n      \r\n      // Clear only up to column J to preserve discount in column L\r\n      wsRevenuePredictions.getRangeByIndexes(1, 0, 10000, 10).clear(Excel.ClearApplyTo.contents);\r\n      drugsExpirationPredictions\r\n        .getRangeByIndexes(1, 0, 10000, 50)\r\n        .clear(Excel.ClearApplyTo.contents);\r\n      \r\n      //Get the Details\r\n      usedRange.load(\"rowIndex\");\r\n      await context.sync();\r\n      let lastRow = usedRange.rowIndex;\r\n      let data = ws.getRange(`B${1}:O${lastRow + 1}`);\r\n      data.load(\"values\");\r\n      packageDetailsRange.load(\"values\");\r\n      await context.sync();\r\n      let packageDetailsData = packageDetailsRange.values;\r\n      let medsObj = {};\r\n      let emkDetails = {};\r\n      \r\n      //Get the drug details\r\n      console.log(data.values);\r\n      data.values.forEach((row) => {\r\n        medsObj[row[0]] = {\r\n          totalUnitCost: row[3],\r\n          laCarte: row[4],\r\n          includedInPackages: [],\r\n          shelfLife: row[7],\r\n        };\r\n        for (let i = 8; i <= 13; i++) {\r\n          if (row[i].toString().trim() !== \"\") {\r\n            medsObj[row[0]].includedInPackages.push(data.values[0][i]);\r\n          }\r\n        }\r\n      });\r\n\r\n      packageDetailsData.forEach((row) => {\r\n        //Create the emk objecst\r\n        emkDetails[row[0]] = {\r\n          retailPrice: row[1],\r\n          newKitShares: row[2],\r\n          purchasePrice: row[3],\r\n          drugs: [],\r\n        };\r\n      });\r\n      console.log(medsObj,\"Meds Object\")\r\n\r\n      //Get the New Kit Data\r\n      let wsNewKit = context.workbook.worksheets.getItem(\"New Kit Data\");\r\n      let newKitsLastRow = wsNewKit.getUsedRange().getLastRow();\r\n      newKitsLastRow.load(\"rowIndex\");\r\n      await context.sync();\r\n      let newKitsLastRowIndex = newKitsLastRow.rowIndex;\r\n      let dataRange = wsNewKit.getRange(`A2:B${newKitsLastRowIndex + 1}`);\r\n      dataRange.load(\"values\");\r\n      await context.sync();\r\n      let newKitData = dataRange.values;\r\n      let salesHistory = {};\r\n      \r\n      // Get discount percentage from L2\r\n      let discountPercentage = 0;\r\n      try {\r\n        const discountRange = wsNewKit.getRange(\"L2\");\r\n        discountRange.load(\"values\");\r\n        await context.sync();\r\n        \r\n        if (discountRange.values[0][0] !== null && discountRange.values[0][0] !== \"\" && !isNaN(discountRange.values[0][0])) {\r\n          discountPercentage = parseFloat(discountRange.values[0][0]);\r\n          console.log(\"Using discount percentage:\", discountPercentage);\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error reading discount from L2, using 0% discount\");\r\n      }\r\n      \r\n      //Get the Kit Revenue for each Kit and total Revenue with discount applied\r\n      let calculatedKitData = newKitData.map((row) => {\r\n        let currentMonthKey = formatDate(excelSerialDateToJSDate(row[0]))\r\n        if(!isPastMonth(currentMonthKey)){\r\n          salesHistory[currentMonthKey] = row[1];\r\n        }\r\n        let numberOfKits = row[1];\r\n        \r\n        // Calculate base prices\r\n        let EMK1_base =\r\n          Math.floor(emkDetails[\"EMK1\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1\"].retailPrice;\r\n        let EMK5_base =\r\n          Math.floor(emkDetails[\"EMK5\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK5\"].retailPrice;\r\n        let EMK10_base =\r\n          Math.floor(emkDetails[\"EMK10\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10\"].retailPrice;\r\n        let EMK15_base =\r\n          Math.floor(emkDetails[\"EMK15\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK15\"].retailPrice;\r\n        let EMK1Mini_base =\r\n          Math.floor(emkDetails[\"EMK1-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK1-Mini\"].retailPrice;\r\n        let EMK10Mini_base =\r\n          Math.floor(emkDetails[\"EMK10-Mini\"].newKitShares * numberOfKits) *\r\n          emkDetails[\"EMK10-Mini\"].retailPrice;\r\n        \r\n        // Apply discount to total revenue\r\n        let totalBaseRevenue = EMK1_base + EMK5_base + EMK10_base + EMK15_base + EMK1Mini_base + EMK10Mini_base;\r\n        let totalDiscountedRevenue = totalBaseRevenue * (1 - discountPercentage);\r\n        \r\n        // Apply discount to individual kit revenues\r\n        let EMK1 = EMK1_base * (1 - discountPercentage);\r\n        let EMK5 = EMK5_base * (1 - discountPercentage);\r\n        let EMK10 = EMK10_base * (1 - discountPercentage);\r\n        let EMK15 = EMK15_base * (1 - discountPercentage);\r\n        let EMK1Mini = EMK1Mini_base * (1 - discountPercentage);\r\n        let EMK10Mini = EMK10Mini_base * (1 - discountPercentage);\r\n        \r\n        return [\r\n          row[0],\r\n          row[1],\r\n          totalDiscountedRevenue,\r\n          \"\",\r\n          EMK1,\r\n          EMK5,\r\n          EMK10,\r\n          EMK15,\r\n          EMK1Mini,\r\n          EMK10Mini,\r\n        ];\r\n      });\r\n      \r\n      //Add the Kit Revenue to the sheet (only up to column J to preserve discount in L)\r\n      wsNewKit.getRange(\"A2:J\" + (calculatedKitData.length + 1)).values = calculatedKitData;\r\n      \r\n      //Get the drugs that belong to each Kit\r\n      data.values.forEach((row) => {\r\n        row[8] === \"X\" ? emkDetails[\"EMK1\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[9] === \"X\" ? emkDetails[\"EMK5\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[10] === \"X\" ? emkDetails[\"EMK10\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[11] === \"X\" ? emkDetails[\"EMK15\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[12] === \"X\" ? emkDetails[\"EMK1-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n        row[13] === \"X\" ? emkDetails[\"EMK10-Mini\"][\"drugs\"].push(row[0]) : \"\";\r\n      });\r\n      \r\n      //Creating calculation for all drugs per month\r\n      let newKitDrugPredictions = [];\r\n      Object.keys(salesHistory).forEach((month) => {\r\n        let totalKitAmount = salesHistory[month];\r\n        Object.keys(emkDetails).forEach((kit) => {\r\n          let kitAmount = Math.floor(totalKitAmount * emkDetails[kit].newKitShares);\r\n          if (kitAmount < 1) return;\r\n          emkDetails[kit].drugs.forEach((drug) => {\r\n            if (medsObj[drug].shelfLife == \"\" || medsObj[drug].shelfLife == \"N/A\") return;\r\n            newKitDrugPredictions.push([\r\n              month,\r\n              kit,\r\n              drug,\r\n              kitAmount,\r\n              medsObj[drug].laCarte * kitAmount,\r\n              medsObj[drug].shelfLife,\r\n            ]);\r\n          });\r\n        });\r\n      });\r\n\r\n      //Adding Replenish Dates to the Drug Details\r\n      const updatedDrugData = newKitDrugPredictions.map((row) => {\r\n        const [date, code, description, qty, total, expiryDays] = row;\r\n        const [year, month] = date.split(\"-\").map(Number);\r\n        const baseDate = new Date(Date.UTC(year, month - 1, 1)); // Use UTC\r\n\r\n        const replenishments = [];\r\n\r\n        for (let i = 1; i <= 10; i++) {\r\n          const expireDate = new Date(baseDate);\r\n          expireDate.setUTCDate(expireDate.getUTCDate() + expiryDays * i); // Use UTC\r\n\r\n          const expireYear = expireDate.getUTCFullYear();\r\n          const expireMonth = String(expireDate.getUTCMonth() + 1).padStart(2, \"0\");\r\n\r\n          replenishments.push(`${expireYear}-${expireMonth}`);\r\n        }\r\n\r\n        return [...row, ...replenishments];\r\n      });\r\n      \r\n      drugsExpirationPredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        updatedDrugData.length,\r\n        updatedDrugData[0].length\r\n      ).values = updatedDrugData;\r\n      \r\n      // --- Step 5: Execute everything\r\n      const baseMap = getBaseKitMap(calculatedKitData);\r\n      const forecastMap = generateForecast(\"2025-07\", 300, baseMap);\r\n\r\n      // Plug in your generated updatedDrugData (with replenishment dates)\r\n      let drugDataMap = applyDrugDataRevenue(forecastMap, updatedDrugData);\r\n      let usedRangeAutoReplenishMedGroups = wsAutoReplenishMedGroups.getUsedRange();\r\n      let lastRowAutoReplenishMedGroups = usedRangeAutoReplenishMedGroups.getLastRow();\r\n      lastRowAutoReplenishMedGroups.load(\"rowIndex\");\r\n      await context.sync();\r\n      \r\n      //Get Autor replenish sheet data\r\n      let rangeAutoReplenishMedGroupsAll = wsAutoReplenishMedGroups.getRangeByIndexes(\r\n        2,\r\n        0,\r\n        lastRowAutoReplenishMedGroups.rowIndex - 1,\r\n        6\r\n      );\r\n      rangeAutoReplenishMedGroupsAll.load(\"values\");\r\n      await context.sync();\r\n      \r\n      //Add the Future expiration dates for the auto replenishments\r\n      const outputAutoReplenishAndForecast = [\r\n        [\r\n          \"Group\",\r\n          \"Company\",\r\n          \"Medication\",\r\n          \"Expiration\",\r\n          \"Price\",\r\n          \"Auto Replenish\",\r\n          \"Generated Dates\",\r\n        ],\r\n      ];\r\n\r\n      for (const row of rangeAutoReplenishMedGroupsAll.values) {\r\n        const [group, company, medication, expirationStr, price, autoReplenish] = row;\r\n\r\n        if (autoReplenish !== \"Enabled\" || expirationStr == \"N/A\" || expirationStr == \"\") continue;\r\n\r\n        const config = medsObj[medication];\r\n        const baseDate = excelSerialDateToJSDate(expirationStr);\r\n\r\n        // Always include original\r\n        outputAutoReplenishAndForecast.push([\r\n          group,\r\n          company,\r\n          medication,\r\n          baseDate ? formatMonth(baseDate) : \"N/A\",\r\n          price,\r\n          autoReplenish,\r\n          \"\",\r\n        ]);\r\n\r\n        if (!config || !baseDate){ \r\n          continue\r\n        };\r\n\r\n        const { shelfLife, laCarte: configPrice } = config;\r\n\r\n        for (let i = 1; i <= 20; i++) {\r\n          const futureDate = addDays(baseDate, shelfLife * i);\r\n          outputAutoReplenishAndForecast.push([\r\n            group,\r\n            company,\r\n            medication,\r\n            formatMonth(futureDate),\r\n            parseFloat(price.toFixed(2)),\r\n            autoReplenish,\r\n            \"Generated\",\r\n          ]);\r\n        }\r\n      }\r\n\r\n      // Auto-replenish items (only applied once)\r\n      let autoReplenish = applyAutoReplenishOnce(forecastMap, outputAutoReplenishAndForecast);\r\n      console.log(drugDataMap, baseMap, autoReplenish);\r\n\r\n      // 1. Combine all unique months\r\n      const allMonths = new Set([\r\n        ...drugDataMap.keys(),\r\n        ...autoReplenish.keys(),\r\n        ...baseMap.keys(),\r\n        ...forecastMap.keys(),\r\n      ]);\r\n\r\n      // 2. Generate final forecast array with Non-Auto Replenishment column\r\n      const finalRevenueForecast = [];\r\n      const currentMonth = getCurrentMonthUTC();\r\n      const currentMonthKey = formatMonth(currentMonth);\r\n      // Get the percentage from Non-Auto Replenish sheet\r\n      let nonAutoReplenishSheet;\r\n      let nonAutoPercentage = 0.25; // Default to 25%\r\n      \r\n      try {\r\n        nonAutoReplenishSheet = context.workbook.worksheets.getItem(\"Non-Auto Replenish\");\r\n        const g2Range = nonAutoReplenishSheet.getRange(\"G2\");\r\n        const h2Range = nonAutoReplenishSheet.getRange(\"H2\");\r\n        \r\n        g2Range.load(\"values\");\r\n        h2Range.load(\"values\");\r\n        await context.sync();\r\n        \r\n        // Use H2 if not empty, otherwise use G2\r\n        if (h2Range.values[0][0] !== null && h2Range.values[0][0] !== \"\" && !isNaN(h2Range.values[0][0])) {\r\n          nonAutoPercentage = parseFloat(h2Range.values[0][0]);\r\n        } else if (g2Range.values[0][0] !== null && g2Range.values[0][0] !== \"\" && !isNaN(g2Range.values[0][0])) {\r\n          nonAutoPercentage = parseFloat(g2Range.values[0][0]);\r\n        }\r\n        \r\n        console.log(\"Using Non-Auto Replenishment percentage:\", nonAutoPercentage);\r\n      } catch (error) {\r\n        console.log(\"Non-Auto Replenish sheet not found or error reading values, using default 25%\");\r\n      }\r\n\r\n      // Get AED sales value\r\n      let aedSalesValue = 0;\r\n      try {\r\n        const aedSalesSheet = context.workbook.worksheets.getItem(\"AED Sales\");\r\n        const aedSalesRange = aedSalesSheet.getRange(\"G2\");\r\n        aedSalesRange.load(\"values\");\r\n        await context.sync();\r\n        \r\n        if (aedSalesRange.values[0][0] !== null && aedSalesRange.values[0][0] !== \"\" && !isNaN(aedSalesRange.values[0][0])) {\r\n          aedSalesValue = parseFloat(aedSalesRange.values[0][0]);\r\n        }\r\n        \r\n        console.log(\"Using AED Sales value:\", aedSalesValue);\r\n      } catch (error) {\r\n        console.log(\"AED Sales sheet not found or error reading G2 value, using 0\");\r\n      }\r\n\r\n      for (const month of [...allMonths].sort()) {\r\n        const newkit = baseMap.get(month) || 0;\r\n        const auto = autoReplenish.get(month) || 0;\r\n        const drugData = drugDataMap.get(month) || 0;\r\n        \r\n        // Calculate Non-Auto Replenishment (25% of Auto Replenish, only for future months)\r\n        const nonAutoReplenishment = (month > currentMonthKey) ? auto * nonAutoPercentage : 0;\r\n        \r\n        // Calculate AED Sales (only for future months)\r\n        const aedSales = (month > currentMonthKey) ? aedSalesValue : 0;\r\n        \r\n        // Update total revenue to include non-auto replenishment and AED sales\r\n        const totalRevenue = newkit + auto + drugData + nonAutoReplenishment + aedSales;\r\n\r\n        finalRevenueForecast.push([\r\n          month, \r\n          totalRevenue, \r\n          newkit, \r\n          auto, \r\n          drugData,\r\n          nonAutoReplenishment,  // New column: Non-Auto Replenishment\r\n          aedSales               // New column: AED sales\r\n        ]);\r\n      }\r\n\r\n      wsRevenuePredictions.getRangeByIndexes(\r\n        1,\r\n        0,\r\n        finalRevenueForecast.length,\r\n        finalRevenueForecast[0].length\r\n      ).values = finalRevenueForecast;\r\n      await context.sync();\r\n      console.table(finalRevenueForecast);\r\n\r\n      //AutoReplenish History\r\n      let autoReplenishDatesAndData = getDatesAndData(finalRevenueForecast);\r\n      const sheet = context.workbook.worksheets.getItem(\"AutoReplenishHistory\");\r\n      \r\n      //Get last column\r\n      const autoReplenishHistoryUsedRange = sheet.getUsedRange();\r\n      autoReplenishHistoryUsedRange.load([\"columnIndex\", \"columnCount\",\"rowCount\"]);\r\n      await context.sync();\r\n      \r\n      // Load row 2 headers (row index 1)\r\n      if(autoReplenishHistoryUsedRange.columnCount <=1) return //There is no data.\r\n      \r\n      const headerRange = sheet.getRangeByIndexes(1, 1, 1, autoReplenishHistoryUsedRange.columnCount-1);\r\n      const datesRange = sheet.getRangeByIndexes(2,0,autoReplenishHistoryUsedRange.rowCount-2,1);\r\n      headerRange.load(\"values\");\r\n      datesRange.load(\"values\");\r\n      await context.sync();\r\n      \r\n      console.log(\"Dates in History:\", datesRange.values);\r\n      const headers = headerRange.values[0] // Row 2\r\n      let currentMonthFormatted = formatDateWithDay(new Date());\r\n      let currentMonthPostion = headers.indexOf(currentMonthFormatted);\r\n      let datesInHistory = datesRange.values.map(x => x[0]);\r\n      \r\n      // Use normalized date comparison to find the correct starting row\r\n      let beginningDateIndex = findDateIndexInHistory(datesInHistory, autoReplenishDatesAndData[0][0]);\r\n      \r\n      console.log(\"Beginning Date Index:\", beginningDateIndex);\r\n      console.log(\"Target Date:\", autoReplenishDatesAndData[0][0]);\r\n      console.log(\"Current Month Position:\", currentMonthPostion);\r\n      \r\n      await context.sync();\r\n      \r\n      //Check if it exists in the headers\r\n      if(currentMonthPostion !== -1){ //it Exists\r\n        //Add data to the same column\r\n        sheet.getRangeByIndexes(2+beginningDateIndex,currentMonthPostion+1,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[1]])\r\n        sheet.getRangeByIndexes(2+beginningDateIndex,0,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[0]])\r\n      }\r\n      else{\r\n        //Add data to a new column(The last column) starting at index 1 \r\n        \r\n        sheet.getRangeByIndexes(1, autoReplenishHistoryUsedRange.columnCount, 1, 1).numberFormat = [[\"@\"]]; // force text\r\n        sheet.getRangeByIndexes(1, autoReplenishHistoryUsedRange.columnCount, 1, 1).values = [[currentMonthFormatted]];\r\n        sheet.getRangeByIndexes(2+beginningDateIndex,autoReplenishHistoryUsedRange.columnCount,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[1]])\r\n        sheet.getRangeByIndexes(2+beginningDateIndex,0,autoReplenishDatesAndData.length,1).values = autoReplenishDatesAndData.map(x=>[x[0]])\r\n      }\r\n      \r\n      await context.sync();\r\n      return context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nfunction getDatesAndData(foreCastData=[[]]){\r\n  return foreCastData.map(\r\n    x => [x[0],x[3]]\r\n  )\r\n}\r\n\r\nfunction getBaseKitMap(baseKitRevenue) {\r\n  const map = new Map();\r\n\r\n  const now = getCurrentMonthUTC(); // Use UTC for consistency\r\n  const nextMonth = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth() + 1, 1));\r\n\r\n  baseKitRevenue.forEach(([dateStr, kitQuantity, revenue]) => {\r\n    const date = excelSerialDateToJSDate(dateStr);\r\n    if (date >= nextMonth) {\r\n      const key = `${date.getUTCFullYear()}-${String(date.getUTCMonth() + 1).padStart(2, \"0\")}`;\r\n      map.set(key, revenue);\r\n    }\r\n  });\r\n\r\n  return map;\r\n}\r\n\r\nfunction generateForecast(start = \"2023-06\", months = 120, baseMap = new Map()) {\r\n  const forecast = new Map();\r\n  const [startYear, startMonth] = start.split(\"-\").map(Number);\r\n  const date = new Date(Date.UTC(startYear, startMonth - 1, 1)); // Use UTC\r\n\r\n  for (let i = 0; i < months; i++) {\r\n    const year = date.getUTCFullYear();\r\n    const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\r\n    const key = `${year}-${month}`;\r\n    const baseRevenue = baseMap.get(key) || 0;\r\n    forecast.set(key, baseRevenue);\r\n    date.setUTCMonth(date.getUTCMonth() + 1);\r\n  }\r\n\r\n  return forecast;\r\n}\r\n\r\nfunction applyDrugDataRevenue(forecastMap, drugData) {\r\n  let drugDataMap = new Map();\r\n  for (const row of drugData) {\r\n    const total = parseFloat(row[4]);\r\n    const replenishmentDates = row.slice(6);\r\n    \r\n    replenishmentDates.forEach((date) => {\r\n      if (forecastMap.has(date)) {\r\n        forecastMap.set(date, forecastMap.get(date) + total);\r\n        drugDataMap.set(\r\n          date,\r\n          drugDataMap.get(date) != undefined ? drugDataMap.get(date) + total : total\r\n        );\r\n      }\r\n    });\r\n  }\r\n  return drugDataMap;\r\n}\r\n\r\nfunction applyAutoReplenishOnce(forecastMap, autoData) {\r\n  let autoReplenish = new Map();\r\n  autoData.forEach((row) => {\r\n    const [Group, Company, Medication, expDate, priceStr, status] = row;\r\n\r\n    if (status !== \"Enabled\") return;\r\n    const price = typeof priceStr == \"string\" ? parseFloat(priceStr.replace(\"$\", \"\")) : priceStr;\r\n\r\n    // Parse expiration date consistently\r\n    const date = parseMonthString(expDate);\r\n    if (!date) return;\r\n    \r\n    const key = `${date.getUTCFullYear()}-${String(date.getUTCMonth() + 1).padStart(2, \"0\")}`;\r\n    \r\n    if (forecastMap.has(key)) {\r\n      if (!isNaN(price)) {\r\n        forecastMap.set(key, forecastMap.get(key) + price);\r\n        autoReplenish.set(\r\n          key,\r\n          autoReplenish.get(key) !== undefined ? autoReplenish.get(key) + price : price\r\n        );\r\n      }\r\n    }\r\n  });\r\n  return autoReplenish;\r\n}\r\n\r\n// ─── Helper Functions (Timezone Safe) ──────────────────────────────────────\r\n\r\nfunction excelSerialDateToJSDate(serial) {\r\n  // More robust Excel serial date conversion with UTC\r\n  if (!serial || isNaN(serial)) return new Date(NaN);\r\n  \r\n  const utcDays = Math.floor(serial - 25569);\r\n  const utcValue = utcDays * 86400;\r\n  const dateInfo = new Date(utcValue * 1000);\r\n  \r\n  // Return UTC date to avoid timezone shifts\r\n  return new Date(Date.UTC(\r\n    dateInfo.getUTCFullYear(),\r\n    dateInfo.getUTCMonth(),\r\n    dateInfo.getUTCDate()\r\n  ));\r\n}\r\n\r\nfunction isPastMonth(inputDate) {\r\n  const today = getCurrentMonthUTC();\r\n  \r\n  const currentYear = today.getUTCFullYear();\r\n  const currentMonth = today.getUTCMonth() + 1;\r\n\r\n  let year, month;\r\n\r\n  if (inputDate instanceof Date) {\r\n    year = inputDate.getUTCFullYear();\r\n    month = inputDate.getUTCMonth() + 1;\r\n  } else if (typeof inputDate === \"string\") {\r\n    [year, month] = inputDate.split(\"-\").map(Number);\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  return (currentYear > year || (currentYear === year && currentMonth > month));\r\n}\r\n\r\nfunction formatDate(date) {\r\n  // Always use UTC to avoid timezone issues\r\n  const year = date.getUTCFullYear();\r\n  const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\r\n  return `${year}-${month}`;\r\n}\r\n\r\nfunction formatDateWithDay(date) {\r\n  // Always use UTC to avoid timezone issues\r\n  const year = date.getUTCFullYear();\r\n  const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getUTCDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nfunction formatMonth(dt) {\r\n  const y = dt.getUTCFullYear(),\r\n    m = String(dt.getUTCMonth() + 1).padStart(2, \"0\");\r\n  return `${y}-${m}`;\r\n}\r\n\r\nfunction addDays(dt, n) {\r\n  // Use UTC to avoid DST issues\r\n  const result = new Date(dt);\r\n  result.setUTCDate(result.getUTCDate() + n);\r\n  return result;\r\n}\r\n\r\nfunction getCurrentMonthUTC() {\r\n  const now = new Date();\r\n  return new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), 1));\r\n}\r\n\r\nfunction parseMonthString(ym) {\r\n  // Robust parsing of various date formats\r\n  if (!ym || ym === \"N/A\") return new Date(NaN);\r\n  \r\n  try {\r\n    // Handle \"YYYY-MM\" format\r\n    if (/^\\d{4}-\\d{2}$/.test(ym)) {\r\n      const [y, m] = ym.split(\"-\").map(Number);\r\n      return new Date(Date.UTC(y, m - 1, 1));\r\n    }\r\n    \r\n    // Handle \"MM/DD/YYYY\" or other formats\r\n    const parsed = new Date(ym);\r\n    if (isNaN(parsed.getTime())) return new Date(NaN);\r\n    \r\n    // Convert to UTC first day of month\r\n    return new Date(Date.UTC(parsed.getUTCFullYear(), parsed.getUTCMonth(), 1));\r\n  } catch (e) {\r\n    return new Date(NaN);\r\n  }\r\n}\r\n\r\nfunction findDateIndexInHistory(datesInHistory, targetDate) {\r\n  // Normalize both dates for comparison\r\n  const normalizedTarget = normalizeDateForComparison(targetDate);\r\n  \r\n  for (let i = 0; i < datesInHistory.length; i++) {\r\n    const normalizedHistory = normalizeDateForComparison(datesInHistory[i]);\r\n    if (normalizedTarget.getTime() === normalizedHistory.getTime()) {\r\n      return i;\r\n    }\r\n  }\r\n  \r\n  console.warn(\"Target date not found in history, using index 0\");\r\n  return 0;\r\n}\r\n\r\nfunction normalizeDateForComparison(dateStr) {\r\n  // Handle both \"YYYY-MM\" and \"YYYY-MM-DD\" formats\r\n  const parts = dateStr.split('-');\r\n  const year = parseInt(parts[0]);\r\n  const month = parseInt(parts[1]);\r\n  \r\n  // Always return the first day of month in UTC for consistent comparison\r\n  return new Date(Date.UTC(year, month - 1, 1));\r\n}\r\n\r\n// Legacy function kept for compatibility\r\nfunction parseMonth(ym) {\r\n  return parseMonthString(ym);\r\n}","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Protect It First Functions</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header style=\\\"display:flex;justify-content:center;align-items:center;height:20vh\\\"> <h1 class=\\\"ms-font-su\\\">Functions</h1> </header> <div style=\\\"padding:10px\\\"> <div style=\\\"padding:10px;border:1px dashed #000\\\"> <h1>Revenue Predictions</h1> <h2>Instructions</h2> <ol> <li>Please Don't rename the sheets </li> <li>Keep the format of the sheets constant.</li> <li>Drug Replenish Dates(New Kits) & Revenue Prediction contain the Drug replenishment dates and Revenue Predictions respectively</li> <li>To Create the prediction click the button below</li> </ol> <div id=\\\"run\\\" style=\\\"padding:10px;background-color:#6495ed;color:#fff;cursor:pointer;text-align:center;font-weight:700\\\"> <span class=\\\"ms-Button-label\\\" style=\\\"text-align:center\\\">Create Revenue Predictions</span> </div> </div> </div> <p><label id=\\\"item-subject\\\"></label></p>  </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","_invoke","configurable","writable","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","s","next","_slicedToArray","_arrayWithHoles","push","_iterableToArrayLimit","_nonIterableRest","toString","slice","constructor","name","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","run","_run","_callee2","_t5","_context2","Excel","_ref3","_callee","context","ws","packageDetails","packageDetailsRange","usedRange","drugsExpirationPredictions","wsAutoReplenishMedGroups","wsRevenuePredictions","lastRow","data","packageDetailsData","medsObj","emkDetails","wsNewKit","newKitsLastRow","newKitsLastRowIndex","dataRange","newKitData","salesHistory","discountPercentage","discountRange","calculatedKitData","newKitDrugPredictions","updatedDrugData","baseMap","forecastMap","drugDataMap","usedRangeAutoReplenishMedGroups","lastRowAutoReplenishMedGroups","rangeAutoReplenishMedGroupsAll","outputAutoReplenishAndForecast","_iterator2","_step2","row","_row3","group","company","medication","expirationStr","price","_autoReplenish","config","baseDate","shelfLife","futureDate","autoReplenish","allMonths","finalRevenueForecast","currentMonth","currentMonthKey","nonAutoReplenishSheet","nonAutoPercentage","g2Range","h2Range","aedSalesValue","aedSalesSheet","aedSalesRange","_iterator3","_step3","month","newkit","auto","drugData","nonAutoReplenishment","aedSales","totalRevenue","autoReplenishDatesAndData","sheet","autoReplenishHistoryUsedRange","headerRange","datesRange","headers","currentMonthFormatted","currentMonthPostion","datesInHistory","beginningDateIndex","_t2","_context","workbook","worksheets","getItem","getRange","getUsedRange","getLastRow","getRangeByIndexes","clear","ClearApplyTo","contents","load","sync","rowIndex","concat","values","console","log","forEach","totalUnitCost","laCarte","includedInPackages","trim","retailPrice","newKitShares","purchasePrice","drugs","isNaN","parseFloat","map","formatDate","excelSerialDateToJSDate","isPastMonth","numberOfKits","EMK1_base","Math","floor","EMK5_base","EMK10_base","EMK15_base","EMK1Mini_base","EMK10Mini_base","totalDiscountedRevenue","EMK1","EMK5","EMK10","EMK15","EMK1Mini","EMK10Mini","keys","totalKitAmount","kit","kitAmount","drug","_row2","date","expiryDays","_date$split$map2","split","Number","year","Date","UTC","replenishments","expireDate","setUTCDate","getUTCDate","expireYear","getUTCFullYear","expireMonth","String","getUTCMonth","padStart","getBaseKitMap","generateForecast","applyDrugDataRevenue","formatMonth","addDays","toFixed","applyAutoReplenishOnce","Set","getCurrentMonthUTC","sort","err","table","getDatesAndData","columnCount","rowCount","formatDateWithDay","indexOf","x","findDateIndexInHistory","numberFormat","_x","error","baseKitRevenue","Map","now","nextMonth","_ref","_ref2","dateStr","revenue","set","start","months","forecast","_start$split$map2","startYear","startMonth","baseRevenue","setUTCMonth","_step","_iterator","_loop","total","has","autoData","_row","expDate","priceStr","ym","NaN","_ym$split$map2","parsed","getTime","parseMonthString","serial","utcDays","dateInfo","inputDate","today","currentYear","_inputDate$split$map2","day","dt","result","targetDate","normalizedTarget","normalizeDateForComparison","normalizedHistory","warn","parts","parseInt","Office","onReady","info","host","HostType","getElementById","onclick","URL"],"sourceRoot":""}