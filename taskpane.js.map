{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"run\").onclick = run;\n  }\n});\n\nexport async function run() {\n  try {\n    await Excel.run(async (context) => {\n      let ws  = context.workbook.worksheets.getItem(\"DrugDetails\");\n      let packageDetails = context.workbook.worksheets.getItem(\"packageDistribution\");\n      let packageDetailsRange = packageDetails.getRange(\"A2:D7\");\n      let usedRange = ws.getUsedRange().getLastRow()\n      let drugsExpirationPredictions = context.workbook.worksheets.getItem(\"Drug Replenish Dates(New Kits)\");\n      let wsAutoReplenishMedGroups = context.workbook.worksheets.getItem(\"auto_replenish_med_groups\");\n      let wsRevenuePredictions = context.workbook.worksheets.getItem(\"Revenue Prediction\")\n      wsRevenuePredictions.getRangeByIndexes(1,0,10000,50).clear(Excel.ClearApplyTo.contents)\n      drugsExpirationPredictions.getRangeByIndexes(1,0,10000,50).clear(Excel.ClearApplyTo.contents)\n     //Get the Details  \n     usedRange.load(\"rowIndex\")\n     await context.sync()\n     let lastRow = usedRange.rowIndex;\n     let data = ws.getRange(`B${1}:O${lastRow+1}`)\n     data.load(\"values\");\n     packageDetailsRange.load(\"values\");\n     await context.sync()\n    let packageDetailsData = packageDetailsRange.values;\n    let medsObj = {}\n    let emkDetails = {}\n    //Get the drug details\n     console.log(data.values)\n    data.values.forEach(row=>{\n      medsObj[row[0]] = {\n        totalUnitCost: row[3],\n        laCarte: row[4],\n        includedInPackages:[],\n        shelfLife:row[7]\n      }\n      for(let i=8;i<=13;i++){\n        if(row[i].toString().trim() !==\"\"){\n          medsObj[row[0]].includedInPackages.push(data.values[0][i]);\n        }\n      }\n    })\n\n\n    packageDetailsData.forEach(row=>{\n      //Create the emk objecst\n      emkDetails[row[0]] = {\n        retailPrice:row[1],\n        newKitShares: row[2],\n        purchasePrice: row[3],\n        drugs:[]\n      }\n    })\n    // console.log(medsObj,emkDetails)\n\n    //Get the New Kit Data\n    let wsNewKit = context.workbook.worksheets.getItem(\"New Kit Data\");\n    let newKitsLastRow = wsNewKit.getUsedRange().getLastRow();\n    newKitsLastRow.load(\"rowIndex\");\n    await context.sync();\n    let newKitsLastRowIndex = newKitsLastRow.rowIndex;\n    let dataRange = wsNewKit.getRange(`A2:B${newKitsLastRowIndex+1}`);\n    dataRange.load(\"values\");\n    await context.sync()\n    let newKitData = dataRange.values\n    let salesHistory ={}\n     //Get the Kit Revenue for each Kit and total Revenue\n    let calculatedKitData = newKitData.map(row=>{\n      salesHistory[formatDate(excelSerialDateToJSDate(row[0]))] = row[1]\n      let numberOfKits = row[1]\n      let EMK1= Math.floor(emkDetails[\"EMK1\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK1\"].retailPrice        \n      let EMK5= Math.floor(emkDetails[\"EMK5\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK5\"].retailPrice   \n      let EMK10= Math.floor(emkDetails[\"EMK10\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK10\"].retailPrice   \n      let EMK15= Math.floor(emkDetails[\"EMK15\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK15\"].retailPrice   \n      let EMK1Mini=Math.floor(emkDetails[\"EMK1-Mini\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK1-Mini\"].retailPrice   \n      let EMK10Mini=Math.floor(emkDetails[\"EMK10-Mini\"].newKitShares  * numberOfKits)  * emkDetails[\"EMK10-Mini\"].retailPrice   \n      return [row[0],row[1],(EMK1+EMK5+EMK10+EMK15+EMK1Mini+EMK10Mini),\"\",EMK1,EMK5,EMK10,EMK15,EMK1Mini,EMK10Mini];\n    })\n    //Add the Kit Revenue to the sheet\n\n    wsNewKit.getRange(\"A2:J\"+(calculatedKitData.length+1)).values = calculatedKitData\n    //Add the total  Revenue to the sheet \n    // const revenueLedger = calcRevenue(packages.emk1, salesHistory, projectedSales);\n    // console.log(revenueLedger);  \n    //Get the drugs that belong to each Kit \n    data.values.forEach(row=>{\n      row[8] === \"X\" ? emkDetails[\"EMK1\"][\"drugs\"].push(row[0]):\"\";\n      row[9] === \"X\" ? emkDetails[\"EMK5\"][\"drugs\"].push(row[0]):\"\";\n      row[10] === \"X\" ?  emkDetails[\"EMK10\"][\"drugs\"].push(row[0]):\"\";\n      row[11] === \"X\" ?  emkDetails[\"EMK15\"][\"drugs\"].push(row[0]):\"\";\n      row[12] === \"X\" ? emkDetails[\"EMK1-Mini\"][\"drugs\"].push(row[0]):\"\";\n      row[13] === \"X\" ? emkDetails[\"EMK10-Mini\"][\"drugs\"].push(row[0]):\"\";\n    })\n    //Creating calculation for all drugs per month\n    let newKitDrugPredictions =[]\n    Object.keys(salesHistory).forEach(month=>{\n      let totalKitAmount = salesHistory[month];\n      Object.keys(emkDetails).forEach(kit=>{\n        let kitAmount = Math.floor(totalKitAmount*emkDetails[kit].newKitShares)\n        if(kitAmount < 1 ) return\n       emkDetails[kit].drugs.forEach(drug=>{\n         if(medsObj[drug].shelfLife ==\"\" || medsObj[drug].shelfLife ==\"N/A\") return\n          newKitDrugPredictions.push([month,kit,drug,kitAmount,medsObj[drug].laCarte*kitAmount,medsObj[drug].shelfLife])\n        })\n      })\n    })\n    \n    //Adding Replenish Dates to the Drug Details\n    const updatedDrugData = newKitDrugPredictions.map(row => {\n      const [date, code, description, qty, total, expiryDays] = row;\n      const [year, month] = date.split(\"-\").map(Number);\n      const baseDate = new Date(year, month - 1);\n    \n      const replenishments = [];\n    \n      for (let i = 1; i <= 10; i++) {\n        const expireDate = new Date(baseDate);\n        expireDate.setDate(expireDate.getDate() + expiryDays * i);\n    \n        const expireYear = expireDate.getFullYear();\n        const expireMonth = String(expireDate.getMonth() + 1).padStart(2, '0');\n    \n        replenishments.push(`${expireYear}-${expireMonth}`);\n      }\n    \n      return [...row, ...replenishments];\n    });\n drugsExpirationPredictions.getRangeByIndexes(1,0,updatedDrugData.length,updatedDrugData[0].length).values = updatedDrugData\n    // --- Step 5: Execute everything\nconst baseMap = getBaseKitMap(calculatedKitData);\nconst forecastMap = generateForecast(\"2025-05\", 120,baseMap);\n\n// Plug in your generated updatedDrugData (with replenishment dates)\napplyDrugDataRevenue(forecastMap, updatedDrugData);\nconsole.log(forecastMap)\n//Get Autor replenish sheet data\nlet rangeAutoReplenishMedGroups =  wsAutoReplenishMedGroups.getRange(\"D2:F22011\")\nrangeAutoReplenishMedGroups.load(\"values\")\nawait context.sync()\n// Auto-replenish items (only applied once)\nconsole.log(rangeAutoReplenishMedGroups.values.splice(0,10))\napplyAutoReplenishOnce(forecastMap,rangeAutoReplenishMedGroups.values);\n\n// --- Step 6: Final Output\nconst finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\nwsRevenuePredictions.getRangeByIndexes(1,0,finalRevenueForecast.length,finalRevenueForecast[0].length).values = finalRevenueForecast;\n\nconsole.table(finalRevenueForecast);\n    return context.sync()\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// ─── 1. Define your package ────────────────────────────────────────────────\n// const packages = {\n//   emk1: {\n//     packagePrice: 100,       // one‐time package sale price\n//     drugs: [\n//       { id: 'a', price: 10,  replenishDays: 300 },  // auto-replenishable every 300d\n//       { id: 'b', price: 15,  replenishDays: 200 },  \n//       { id: 'c', price: 5,   replenishDays: 550 },\n//       { id: 'd', price: 8 }   // no replenishDays → non-replenishable\n//     ]\n//   }\n// };\n\n// // ─── 2. Your past + future sales maps ─────────────────────────────────────\n// // format: { \"YYYY-MM\": unitsSold }\n// const salesHistory = {\n//   '2022-01': 10,\n//   '2022-02': 12,\n//   // … all of 2022, 2023, 2024 …\n//   '2025-01': 8    // Jan 2025 sales\n// };\n// const projectedSales = generateProjections('2025-02', '2035-03', 5);\n\n// ─── 3. Revenue calculator ────────────────────────────────────────────────\n// --- Step 1: Monthly base revenue\n\n\nfunction getBaseKitMap(baseKitRevenue) {\n  const map = new Map();\n  baseKitRevenue.forEach(([dateStr,kitQuantity, revenue]) => {\n    const date = new excelSerialDateToJSDate(dateStr);\n    const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n    map.set(key, revenue);\n  });\n  return map;\n}\n\n// --- Step 2: Forecast structure (June 2023 → May 2033)\nfunction generateForecast(start = \"2023-06\", months = 120, baseMap = new Map()) {\n  const forecast = new Map();\n  const [startYear, startMonth] = start.split(\"-\").map(Number);\n  const date = new Date(startYear, startMonth - 1);\n\n  for (let i = 0; i < months; i++) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const key = `${year}-${month}`;\n    const baseRevenue = baseMap.get(key) || 0;\n    forecast.set(key, baseRevenue);\n    date.setMonth(date.getMonth() + 1);\n  }\n\n  return forecast;\n}\n\n// --- Step 3: Add drugData replenishment costs\nfunction applyDrugDataRevenue(forecastMap, drugData) {\n  for (const row of drugData) {\n    const total = parseFloat(row[4]);\n    const replenishmentDates = row.slice(6); // dynamically added dates\n    replenishmentDates.forEach(date => {\n      if (forecastMap.has(date)) {\n        forecastMap.set(date, forecastMap.get(date) + total);\n      }\n    });\n  }\n}\n\n// --- Step 4: Add Auto Replenish (just once, at expiration date)\nfunction applyAutoReplenishOnce(forecastMap, autoData) {\n  autoData.forEach(row => {\n    const [expDate, priceStr, status] = row;\n\n    if (status !== \"Enabled\") return;\n    const price = typeof priceStr==\"string\" ? parseFloat(priceStr.replace(\"$\", \"\")):priceStr;\n    \n    // const [expMonth, , expYear] = expDate.split(\"/\").map(Number);\n    // const key = `${expYear}-${String(expMonth).padStart(2, '0')}`;\n    const date = new excelSerialDateToJSDate(expDate);\n    const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n    if (forecastMap.has(key)) {\n      if(!isNaN(price))\n      forecastMap.set(key, forecastMap.get(key) + price);\n    }\n  });\n}\n\n// // --- Step 5: Execute everything\n// const baseMap = getBaseKitMap(baseKitRevenue);\n// const forecastMap = generateForecast(\"2023-06\", 120, baseMap);\n\n// // Plug in your generated updatedDrugData (with replenishment dates)\n// applyDrugDataRevenue(forecastMap, updatedDrugData);\n\n// // Auto-replenish items (only applied once)\n// applyAutoReplenishOnce(forecastMap, [\n//   [\"42\", \"Dental Depot\", \"Insta-Glucose\", \"2/28/2026\", \"$10.85\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Nitroglycerin Sublingual Tablets 0.4 mg\", \"5/31/2026\", \"$46.71\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Albuterol Sulfate (60 doses)\", \"5/31/2026\", \"$79.61\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Ammonia Towelette\", \"3/31/2027\", \"$14.08\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Adrenaline 1 mg/mL\", \"6/30/2026\", \"$31.27\", \"Enabled\"],\n//   [\"42\", \"Dental Depot\", \"Naloxone HCL 0.4 mg/mL\", \"4/30/2026\", \"$43.45\", \"Enabled\"],\n// ]);\n\n// // --- Step 6: Final Output\n// const finalRevenueForecast = Array.from(forecastMap.entries()).map(([month, revenue]) => [month, revenue]);\n// console.table(finalRevenueForecast);\n\n// ─── Helpers ────────────────────────────────────────────────────────────────\nfunction parseMonth(ym) {\n  const [y,m] = ym.split('-').map(Number);\n  return new Date(Date.UTC(y, m-1, 1));\n}\nfunction formatMonth(dt) {\n  const y = dt.getUTCFullYear(),\n        m = String(dt.getUTCMonth()+1).padStart(2,'0');\n  return `${y}-${m}`;\n}\nfunction addDays(dt, n) {\n  return new Date(dt.valueOf() + n*864e5);\n}\nfunction addMonths(dt, n) {\n  const y = dt.getUTCFullYear(),\n        mo = dt.getUTCMonth() + n;\n  return new Date(Date.UTC(y + Math.floor(mo/12), mo%12, 1));\n}\nfunction generateProjections(start, end, perMonth) {\n  const result = {};\n  let cur = parseMonth(start), last = parseMonth(end);\n  while (cur <= last) {\n    result[ formatMonth(cur) ] = perMonth;\n    cur = addMonths(cur, 1);\n  }\n  return result;\n}\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}`;\n}\nfunction excelSerialDateToJSDate(serial) {\n  const utc_days  = Math.floor(serial - 25569);\n  const utc_value = utc_days * 86400; \n  const date = new Date(utc_value * 1000);\n\n  return date;\n}\n// ─── run it ────────────────────────────────────────────────────────────────\n\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Protect It First Functions</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header style=\\\"display:flex;justify-content:center;align-items:center;height:20vh\\\"> <h1 class=\\\"ms-font-su\\\">Functions</h1> </header> <div style=\\\"padding:10px\\\"> <div style=\\\"padding:10px;border:1px dashed #000\\\"> <h1>Revenue Predictions</h1> <h2>Instructions</h2> <ol> <li>Please Don't rename the sheets </li> <li>Keep the format of the sheets constant.</li> <li>Drug Replenish Dates(New Kits) & Revenue Prediction contain the Drug replenishment dates and Revenue Predictions respectively</li> <li>To Create the prediction click the button below</li> </ol> <div id=\\\"run\\\" style=\\\"padding:10px;background-color:#6495ed;color:#fff;cursor:pointer;text-align:center;font-weight:700\\\"> <span class=\\\"ms-Button-label\\\" style=\\\"text-align:center\\\">Create Revenue Predictions</span> </div> </div> </div> <p><label id=\\\"item-subject\\\"></label></p>  </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_slicedToArray","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","toString","from","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","run","_run","_callee2","_context2","Excel","_ref3","_callee","context","ws","packageDetails","packageDetailsRange","usedRange","drugsExpirationPredictions","wsAutoReplenishMedGroups","wsRevenuePredictions","lastRow","data","packageDetailsData","medsObj","emkDetails","wsNewKit","newKitsLastRow","newKitsLastRowIndex","dataRange","newKitData","salesHistory","calculatedKitData","newKitDrugPredictions","updatedDrugData","baseMap","forecastMap","rangeAutoReplenishMedGroups","finalRevenueForecast","_context","workbook","worksheets","getItem","getRange","getUsedRange","getLastRow","getRangeByIndexes","clear","ClearApplyTo","contents","load","sync","rowIndex","concat","console","log","row","totalUnitCost","laCarte","includedInPackages","shelfLife","trim","retailPrice","newKitShares","purchasePrice","drugs","map","date","year","month","excelSerialDateToJSDate","getFullYear","String","getMonth","padStart","getDate","numberOfKits","EMK1","Math","floor","EMK5","EMK10","EMK15","EMK1Mini","EMK10Mini","totalKitAmount","kit","kitAmount","drug","_row2","expiryDays","_date$split$map2","split","Number","baseDate","Date","replenishments","expireDate","setDate","expireYear","expireMonth","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","getBaseKitMap","applyDrugDataRevenue","generateForecast","splice","applyAutoReplenishOnce","entries","_ref4","_ref5","table","_x","t0","error","baseKitRevenue","Map","_ref","_ref2","dateStr","revenue","set","start","months","forecast","_start$split$map2","startYear","startMonth","baseRevenue","setMonth","drugData","_step","_iterator","_n","F","_createForOfIteratorHelper","_loop","total","parseFloat","has","err","autoData","_row","expDate","priceStr","price","serial","utc_days","Office","onReady","info","host","HostType","getElementById","onclick","URL"],"sourceRoot":""}